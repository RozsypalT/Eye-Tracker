from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow, QMessageBox, QLabel
from PyQt5.QtGui import *
from PyQt5.QtCore import Qt

class Ui_ResultsWindow(QMainWindow):
    """Class representing the results window that is shown after the image choosing
    process is finished"""
    def __init__(self, mainWin):
        """Initializes the class"""
        super().__init__()
        self.chosenImage = None    # choosen image name
        self.mainWin = mainWin    # main window object
        self.setupUi(self)

    def setupUi(self, MainWindow):
        """Sets up UI"""
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(483, 440)   # sets the windows size, values were generated by UI generator
        MainWindow.setWindowIcon(QtGui.QIcon("icon.png"))   # sets the windows icon

        self.centralwidget = QtWidgets.QWidget(MainWindow)    # creates the main widget
        self.centralwidget.setObjectName("centralwidget")

        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)   # creates the grid layout for the whole window
        self.gridLayout.setObjectName("gridLayout")
        
        self.gallery = QtWidgets.QScrollArea(self.centralwidget)    # a scroll area where images will be shown
        self.gallery.setGeometry(QtCore.QRect(150, 70, 291, 281))
        self.gallery.setWidgetResizable(True)
        self.gallerycontents = QtWidgets.QWidget()    # a widget that holds images
        self.gallerygrid = QtWidgets.QGridLayout(self.gallerycontents)    # grid layout for the widget with images
        self.gallery.setWidget(self.gallerycontents)
        self.gridLayout.addWidget(self.gallery, 1, 0, 1, 3)   # adds scroll area to the main layout
        # spacer items for placing the buttons
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 2, 2, 1, 1)
        # close button that closes the window
        self.closeButton = QtWidgets.QPushButton(self.centralwidget)
        self.closeButton.setObjectName("pushButton")
        self.closeButton.clicked.connect(self.close)
        self.gridLayout.addWidget(self.closeButton, 2, 1, 1, 1)
        # label above the scroll area
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        """Sets text on window content"""
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Results"))
        self.closeButton.setText(_translate("MainWindow", "Close"))
        self.label.setText(_translate("MainWindow", "Chosen picture: "))
        
    def closeEvent(self, QCloseEvent):
        """Defines a close event that shows the main window and closes results window"""
        self.mainWin.show()
        self.close()
        
    def organizeImage(self, filename):
        """Puts images into scroll area"""
        if filename == '':
            return
        label = QLabel(self.gallerycontents)    # label that holds the pixmap
        pixmap = QPixmap(filename)    # pixmap that holds the image
        label.setFixedSize(300, 300)
        modpixmap = pixmap.scaled(290, 290)
        label.setPixmap(modpixmap)
        label.setAlignment(Qt.AlignCenter)
        label.setStyleSheet("background-color: white")
        self.gallerygrid.addWidget(label, 0, 0)

    def loadImages(self, chosenImage):
        """Loads images.
        Is called from the chooser window"""
        self.chosenImage = chosenImage
        self.organizeImage(self.chosenImage)
